package ldap


type LdapAdaptor struct {
	ldapServer := "ldap.example.com"
	ldapPort := 389
	ldapBindDN := "cn=admin,dc=example,dc=com"
	ldapBindPassword := "admin_password"
	ldapBaseDN := "dc=example,dc=com"

	// Extract username and password from the request
	username := r.FormValue("username")
	password := r.FormValue("password")

}

func (L *LdapAdaptor)connect(){
	l, err := ldap.Dial("tcp", fmt.Sprintf("%s:%d", ldapServer, ldapPort))
			if err != nil {
				log.Printf("LDAP connection error: %s\n", err.Error())
				http.Error(w, "LDAP connection error", http.StatusInternalServerError)
				return
			}
			defer l.Close()

			// Bind with the LDAP credentials
			err = l.Bind(ldapBindDN, ldapBindPassword)
			if err != nil {
				log.Printf("LDAP bind error: %s\n", err.Error())
				http.Error(w, "LDAP bind error", http.StatusUnauthorized)
				return
			}

			// Search for the user in LDAP directory
			searchRequest := ldap.NewSearchRequest(
				ldapBaseDN,
				ldap.ScopeWholeSubtree, ldap.NeverDerefAliases, 0, 0, false,
				fmt.Sprintf("(&(objectClass=person)(uid=%s))", username),
				[]string{"dn"},
				nil,
			)

			sr, err := l.Search(searchRequest)
			if err != nil {
				log.Printf("LDAP search error: %s\n", err.Error())
				http.Error(w, "LDAP search error", http.StatusInternalServerError)
				return
			}

			// Verify the user's credentials
			if len(sr.Entries) != 1 {
				log.Printf("LDAP user not found: %s\n", username)
				http.Error(w, "Invalid username or password", http.StatusUnauthorized)
				return
			}

			userDN := sr.Entries[0].DN
			err = l.Bind(userDN, password)
			if err != nil {
				log.Printf("LDAP authentication error: %s\n", err.Error())
				http.Error(w, "Invalid username or password", http.StatusUnauthorized)
				return
			}

			// Call the next handler on successful authentication
			next.ServeHTTP(w, r)
		})
}